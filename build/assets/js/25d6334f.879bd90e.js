"use strict";(self.webpackChunkarbiter_wrtc_github_io=self.webpackChunkarbiter_wrtc_github_io||[]).push([[330],{9098:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>a});var t=i(5893),s=i(1151);const c={},r="Twine Client Library",l={id:"client-library",title:"Twine Client Library",description:"The twine-client-library package allows users to interact with their Twine Realtime service from their client-side code.",source:"@site/docs/2-client-library.md",sourceDirName:".",slug:"/client-library",permalink:"/docs/client-library",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Twine Service Deployment",permalink:"/docs/deployment"},next:{title:"Twine Server Library",permalink:"/docs/server-library"}},o={},a=[{value:"Installation",id:"installation",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Usage",id:"usage",level:2},{value:"connect &amp; disconnect",id:"connect--disconnect",level:3},{value:"subscribe",id:"subscribe",level:3},{value:"unsubscribe",id:"unsubscribe",level:3},{value:"listenOn",id:"listenon",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"twine-client-library",children:"Twine Client Library"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"twine-client-library"})," package allows users to interact with their Twine Realtime service from their client-side code."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Copy this code into your JavaScript code as an ES module package:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import TwineClientLibrary from 'https://cdn.jsdelivr.net/npm/twine-client-library@1.0/+esm';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsxs)(n.p,{children:["To configure the client, use the ",(0,t.jsx)(n.code,{children:"TwineClientLibrary"})," constructor:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const host = 'https://your-twine-domain.com';\nconst twineClient = new TwineClientLibrary(host);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Once the constructor has been invoked, a connection is established with your Twine server."}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"connect--disconnect",children:"connect & disconnect"}),"\n",(0,t.jsxs)(n.p,{children:["Your ",(0,t.jsx)(n.code,{children:"twine-client-library"})," instance will automatically connect with the server, but if you need to manually connect/disconnect the ",(0,t.jsx)(n.code,{children:"connect"})," and disconnect` methods will do just that:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"twineClient.connect();\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"twineClient.disconnect();\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"disconnectBtn.addEventListener('click', (e) => {\n  e.preventDefault();\n  twineClient.disconnect();\n  setTimeout(() => {\n    twineClient.connect();\n  }, 10000)\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"subscribe",children:"subscribe"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"subscribe"})," method takes a single ",(0,t.jsx)(n.code,{children:"room_id"})," (string) as an argument and subscribes the user to this room on the twine server."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"twineClient.subscribe(room);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"dropdown.addEventListener('change', () => {\n  const room = dropdown.value;\n  twineClient.subscribe(room);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"unsubscribe",children:"unsubscribe"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"unsubscribe"})," method takes a single ",(0,t.jsx)(n.code,{children:"room_id"})," (string) as an argument and unsubscribes the user to this room on the twine server."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"twineClient.unsubscribe(room);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"dropdown.addEventListener('change', () => {\n  const room = dropdown.value;\n  twineClient.unsubscribe(room);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"listenon",children:"listenOn"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"listenOn"})," method takes a ",(0,t.jsx)(n.code,{children:"room_id"})," (string) and a callback function as arguments. The method will then listen for incoming messages to the ",(0,t.jsx)(n.code,{children:"room_id"})," specified. When a message arrives that matches the ",(0,t.jsx)(n.code,{children:"room_id"})," passed to ",(0,t.jsx)(n.code,{children:"listenOn"}),", the ",(0,t.jsx)(n.code,{children:"callback"})," function will be invoked."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"twineClient.listenOn(room, callback);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'twineClient.listenOn("room A", (data) => {\n  console.log(data)\n  // code will be executed everytime an event with a matching `room_id` occurs\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var t=i(7294);const s={},c=t.createContext(s);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);